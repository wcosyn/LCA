
1. Split things up according to functionality and build separate libraries:
	- nucleus
	- pairs
	- ...
2. Clean up 
	- Nucleus::makepairs() (nucleus.cpp)
    - Nucleus::get_shell_max(...) (nucleus.cpp)

3. Make use of general 1d interpolator instead of 
   repeating heaps of code in speedy.cpp...


4. Reproduce the table with "norms" on page 97 of Maartens thesis.
   Make this into a exec file.

5. Clean up
    operator_virtual_ob::get_tensor_me(...)
    do something more elegant and clearer than all those if/else if/else statements

6. Check if the signs in the threejs in density_ob3.cpp really don't matter
   That is the ones that can be matched to corresponding threej of the form
   (*,*,*,0,0,0)

7. Do checks for nucleus with Z>A, now code runs happily without complaining

===========================================================
Wim
===========================================================

1. check partially filled shells functionality: Pair::setfnorm(factor) is referred to in manual

2. take out char* arguments and make them strings

3. modify nucleusall such that bookkeeping is done of which pairs (or links) originate from which isospin combination

4. modify calculation of matrix elements such that all isospin combinations are being calculated in one go.
Now it is very inefficient as basically the program has to start from scratch each time and does almost the same thing all over (but with different linear combinations)

5. replace pointer arguments by reference where applicable...

6. Nucleus::nucleus get rid of dynamic allocations

7. storage of moshinskys: make binary, one file

8. recmosh files had a whole lot of numbers <10E-10, maybe put them zero

9. check what the sum is in the pair class [see nucleus.cpp::450]
check what getRelPair returns [nucleus.cpp::675]

10. Nucleus::makepaircoeffs -> make sense of it  :: Partially done
Check how links are dealt with ("add" functions), now link is stored bidirectionally, but matrix elements aren't necessarily?

11. how does the norm for pairs work?  pair.getcoeff return sqrt of the norm (?)

12. shells class, remove pointers 